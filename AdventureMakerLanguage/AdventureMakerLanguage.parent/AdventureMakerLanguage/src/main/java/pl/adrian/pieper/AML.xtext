grammar pl.adrian.pieper.AML with org.eclipse.xtext.common.Terminals

generate aML "http://www.adrian.pl/pieper/AML"

Model:
    elements+=Element* &
    startData=StartData &
    elements+=Element*;

StartData:
    'adventure on start' '{'
        (adventureInstances += AdventureInstance)*
    '}'
;

Element:
    Location | CharacterType | Monster | Adventure | Item | Skill;

Location:
    'location' name = ID place = Place;

Place:
    GPSLoc | TagLoc;

GPSLoc:
    'in radius of' radius=INT 'meters from' '?'
;

TagLoc:
    'tagged as' tag = ID
;

Skill:
    ActiveSkill | PassiveSkill
;

ActiveSkill:
    'active' 'skill' name=ID '{'
        'effect' ':' effect=Effect
        'mp' ':' mpCost=INT
        ('cooldown' ':' cooldown=INT 'turns')?
    '}'
;

Effect:
    'take' damageFormula=DamageFormula 'damage'
;

DamageFormula:
    value=DamageValue (expression=DamageRightSideExpression)?
;

enum OperationType:
    plus='+' |
    minus='-' |
    divide='/' |
    multiply='*'
;

DamageRightSideExpression:
    operation=OperationType right=DamageFormula
;

DamageBrackets:
    '(' formula=DamageFormula ')'
;

DamageValue:
    DamageVariable | DamageConstant | DamageBrackets
;

enum StatsType:
    INTELLIGENCE='int' |
    STRENGTH='str' |
    AGILITY='agi'
;

DamageVariable:
    value = StatsType
;

DamageConstant:
    value = INT
;

PassiveSkill:
    'passive' 'skill' name=ID
;

CharacterType:
    'character' 'type' name=ID '{'
        'stats on start:'
            hp=INT 'hp'
            mp=INT 'mp'
            str=INT 'str'
            int=INT 'int'
        'stats per lvl:'
            '+' hpPerLevel=INT 'hp'
            '+' mpPerLevel=INT 'mp'
            '+' strPerLevel=INT 'str'
            '+' intPerLevel=INT 'int'
        'skills tree:'
        (skillsTrees+=SkillsNode)*
    '}';

SkillsNode:
    skill=[Skill] ('=>'
    '{' ( childs +=SkillsNode)* '}')?
;


Monster:
    'monster' name=ID '{'
    stats=Stats
    (loot=Loot)?
    '}';

Loot:
    'loot' ':' ('gold' goldMin=INT '-' goldMax=INT)? (items+=LootItem (',' items+=LootItem)*)
;

LootItem:
    type=[Item] chance=INT '%'
;

Stats:
    'power' ':' power=INT
    'hp' ':' hp=INT
    'exp' ':' exp=INT;

Adventure:
    'adventure ' name=ID 'starts from'
        startStage=Stage
    ;

Stage:
    '{' (
            DecisionStage |
            TestStage |
            FightStage |
            MultiStage |
            RemoveAdventureInstanceStage |
            AddAdventureInstanceStage |
            ShowTextStage |
            GetItemStage
    ) '}';

MultiStage:
    (stages+=Stage)+
;
RemoveAdventureInstanceStage:
    'remove' instance = AdventureInstance
;
AddAdventureInstanceStage:
    'add' instance = AdventureInstance
;

AdventureInstance:
    adventure=[Adventure] ('(' freqency=INT ')')? 'at' location=[Location]
;

TestStage:
    contition=Condition pos=Stage ('else' neg=Stage)?
;

Condition:
    'If you have' formula=PlayerLogicFormula
;

PlayerLogicFormula:
    value=PlayerLogicValue (rightSide=PlayerLogicRightSideExpression)?
;
PlayerLogicValue:
    NegativePlayerLogicValue | PlayerLogicBrackets | PlayerLogicValueExpression
;
PlayerLogicBrackets:
    '(' formula=PlayerLogicFormula ')'
;

NegativePlayerLogicValue:
    'not' value=PlayerLogicValue
;

PlayerLogicValueExpression:
    comparator=ComparatorType variable=StatsType 'than' value=INT
;

enum ComparatorType:
    more='more' |
    less='less'
;

enum LogicalOperationType:
    AND='and' |
    OR='or'
;

PlayerLogicRightSideExpression:
    operation=LogicalOperationType rightSide = PlayerLogicFormula
;

DecisionStage:
    'Ask' question=STRING
    (answers+=DecisionAnswer)+
;

DecisionAnswer:
    'Answer' answer=STRING 'to' stage=Stage
;

ShowTextStage:
    'Show' text=STRING
;

GetItemStage:
    'Get' item=[Item]
;

FightStage:
    'Fight with' (oponents+=[Monster] (',' oponents+=[Monster])*)?
    ('If win' onWin=Stage)?
    ('If lost' onLost=Stage)?
;

enum SlotType:
    HELMET='helmet' |
    WEAPON='weapon' |
    ARMOR='armor' |
    GLOVES='gloves'
;

Item:
    'item' name=ID '(' slotType=SlotType ')' '{'
    (bonuses+=Bonus)*
    'value' (value=INT)
    '}';

Bonus:
    '+' value=INT 'to' type=StatsType
;

